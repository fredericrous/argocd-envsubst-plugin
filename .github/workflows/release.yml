name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run tests
        run: |
          chmod +x test.sh test-docker.sh
          ./test.sh
          ./test-docker.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $VERSION^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "PREV_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
            COMMITS=$(git log --pretty=format:"- %s" $PREV_TAG..$VERSION)
          else
            COMMITS=$(git log --pretty=format:"- %s")
          fi
          
          cat > release-notes.md << EOF
          ## What's Changed
          
          ### Docker Image
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION
          \`\`\`
          
          ### Installation
          
          See the [README](https://github.com/${{ github.repository }}#installation) for installation instructions.
          
          ### Commits
          $COMMITS
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG:-}...$VERSION
          EOF
          
          echo "Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          generate_release_notes: true
      
      # Trigger post-release workflow using PAT with workflow scope
      - name: Trigger Post-Release Workflow
        if: success()
        env:
          WORKFLOW_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          if [ -z "$WORKFLOW_TOKEN" ]; then
            echo "::warning::WORKFLOW_TOKEN not set, skipping post-release workflow trigger"
            echo "::warning::To enable automatic post-release workflow, add WORKFLOW_TOKEN secret with 'workflow' scope"
            exit 0
          fi
          
          echo "Triggering post-release workflow..."
          RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $WORKFLOW_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/post-release.yaml/dispatches \
            -d "{\"ref\":\"main\",\"inputs\":{\"tag\":\"${{ steps.release_notes.outputs.VERSION }}\"}}" \
            -w "\nHTTP_STATUS:%{http_code}" \
            -s)
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed -n '1,/HTTP_STATUS:/p' | sed '$d')
          
          if [ "$HTTP_STATUS" == "204" ]; then
            echo "âœ… Successfully triggered post-release workflow"
          else
            echo "::error::Failed to trigger post-release workflow"
            echo "::error::HTTP Status: $HTTP_STATUS"
            echo "::error::Response: $BODY"
            exit 1
          fi